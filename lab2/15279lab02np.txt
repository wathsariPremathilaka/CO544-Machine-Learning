#2.1 Creation 
import numpy as np
a=np.array([1,2,3])
print(a)
#[1 2 3]

print(a.dtype)
#int32

matrix = np.array ([np.arange (3), [i for i in range(1 ,4)],[6 ,7 ,8]])
print(matrix)
'''[[0 1 2]
 [1 2 3]
 [6 7 8]]'''


#2.2 Initialization 
print(np.zeros((5,2,2),dtype=float) )
'''[[[0. 0.]
  [0. 0.]]

 [[0. 0.]
  [0. 0.]]

 [[0. 0.]
  [0. 0.]]

 [[0. 0.]
  [0. 0.]]

 [[0. 0.]
  [0. 0.]]]
'''

print(np.ones((4,5),dtype = int))
'''
[[1 1 1 1 1]
 [1 1 1 1 1]
 [1 1 1 1 1]
 [1 1 1 1 1]]
'''

print(np.empty((3,4),dtype = int))
'''
[[0 0 0 0]
 [0 0 0 0]
 [0 0 0 0]]
'''


print(np.full ([2 ,3] , 4))
'''
[[4 4 4]
 [4 4 4]]
'''

print(np.eye(3))
'''
[[1. 0. 0.]
 [0. 1. 0.]
 [0. 0. 1.]]
'''


print (np.linspace (2 ,3,5) )
#[2.   2.25 2.5  2.75 3.  ]


#2.3 Copying, Sorting, Slicing 

print(np.copy(matrix))
'''
[[0 1 2]
 [1 2 3]
 [6 7 8]]
'''


print(matrix.copy() )
'''
[[0 1 2]
 [1 2 3]
 [6 7 8]]
'''

print(matrix.view())
'''
[[0 1 2]
 [1 2 3]
 [6 7 8]]
'''
print(matrix.sort())
#None

print(matrix.sort(axis=1) )
#None

print(matrix [0: ,:1])
'''
[[0]
 [1]
 [6]]
'''

print(matrix [:1, :])
#[[0 1 2]]


#2.3.1 Try out 

print(matrix [1,0])
#1

#matrix [0] =42
print(matrix)
'''
[[42 42 42]
 [ 1  2  3]
 [ 6  7  8]]
'''

print(matrix [1:3])
'''
[[1 2 3]
 [6 7 8]]
'''

print(matrix [1:])
'''
[[1 2 3]
 [6 7 8]]
'''

print(matrix [1:100])
'''
[[1 2 3]
 [6 7 8]]
'''

print(matrix [:])
'''
[[42 42 42]
 [ 1  2  3]
 [ 6  7  8]]
'''

print(matrix [1:,:2])
'''
[[1 2]
 [6 7]]
'''

print(matrix [:2 ,1:])
'''
[[42 42]
 [ 2  3]]
'''

print(matrix.ravel())
#[42 42 42  1  2  3  6  7  8]

print(matrix [:,1].copy())
#[42  2  7]

print(matrix [1].tolist())
#[1, 2, 3]

print(matrix.reshape(-1))
#[42 42 42  1  2  3  6  7  8]


#2.4.1 Try out 

print(np.sqrt(matrix))
'''
[[6.4807407  6.4807407  6.4807407 ]
 [1.         1.41421356 1.73205081]
 [2.44948974 2.64575131 2.82842712]]
'''

print(np.exp(matrix))
'''
[[1.73927494e+18 1.73927494e+18 1.73927494e+18]
 [2.71828183e+00 7.38905610e+00 2.00855369e+01]
 [4.03428793e+02 1.09663316e+03 2.98095799e+03]]
'''

print(np.min(matrix))
#1

print(np.max(matrix))
#42

print(np.max(matrix,axis=1))
#[42  3  8]


print(np.min(np.maximum(np.random.randn(4),np.random.randn(4))))
#-0.4033134977802363

print(np.mean(matrix))
#17.0

print(np.mean(matrix, axis=0))
#[16.33333333 17.         17.66666667]

print(np.sum(matrix))
#153

print(np.invert(matrix))
'''[[-43 -43 -43]
 [ -2  -3  -4]
 [ -7  -8  -9]]'''

print(np.random.randn(5))
#[-0.13147077  0.19222527  0.12516145 -0.12057538 -2.82704288]


print(np.trace(matrix))
#52



# Python code for random walk. 
import random 
import numpy as np 
import matplotlib.pyplot as plt 

# Probability to move up or down 
prob = [0.5, 0.5] 

# statically defining the starting position 
start = 2
positions = [random.randint(0,10)] 

# creating the random points 
rr = np.random.random(500) 
downp = rr < prob[0] 
upp = rr > prob[1] 


for idownp, iupp in zip(downp, upp): 
    down = idownp and positions[-1] > 1
    up = iupp and positions[-1] < 4
    positions.append(positions[-1] - down + up) 

# plotting down the graph of the random walk in 1D 
plt.plot(positions) 
plt.show() 
