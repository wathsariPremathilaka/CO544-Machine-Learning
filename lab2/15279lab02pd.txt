#4.1 Importing Pandas 
import pandas as pd

#4.2.1 Creating Series and Data Frames 
s = pd.Series([1,4,-2,'home'],index=['a','b','c','d'])
print(s)
'''
a       1
b       4
c      -2
d    home

'''
'''
ToDo 1: What is the data type of s? Can it be changed?
object.Yes it can be changed.
'''

# create a data frame with a dictionary 

data={'population':[1.5,1.2,2.0,1.4,0.8],'state':['Nevada','Florida','Ohio','Texas','Florida'],'year':[2003,2000,2004,1990,1994]}
print(data)
#{'population': [1.5, 1.2, 2.0, 1.4, 0.8], 'state': ['Nevada', 'Florida', 'Ohio', 'Texas', 'Florida'], 'year': [2003, 2000, 2004, 1990, 1994]}

df=pd.DataFrame(data,index=['one','two','three','four','five'],columns=['year','state','population','debt'])
print(df)
'''
       year    state  population debt
one    2003   Nevada         1.5  NaN
two    2000  Florida         1.2  NaN
three  2004     Ohio         2.0  NaN
four   1990    Texas         1.4  NaN
five   1994  Florida         0.8  NaN
'''


#4.2.2 Accessing and modifying 

print(s[1:3])
'''
b     4
c    -2
dtype: object
'''

print(s[0])
#1

print(s['d'])
#home

print(s.values[2:])
#[-2 'home']

print(df[['population','state']])
'''
       population    state
one           1.5   Nevada
two           1.2  Florida
three         2.0     Ohio
four          1.4    Texas
five          0.8  Florida
'''

print(df.population)
'''
one      1.5
two      1.2
three    2.0
four     1.4
five     0.8
Name: population, dtype: float64
'''

print(df.iloc[1:])
'''
       year    state  population debt
two    2000  Florida         1.2  NaN
three  2004     Ohio         2.0  NaN
four   1990    Texas         1.4  NaN
five   1994  Florida         0.8  NaN
'''

print(df.iloc[2:4:,2:5])
'''
       population debt
three         2.0  NaN
four          1.4  NaN
'''

print(df.loc['one'])
'''
year            2003
state         Nevada
population       1.5
debt             NaN
Name: one, dtype: object
'''

df.debt=34.67
print(df)
'''
       year    state  population   debt
one    2003   Nevada         1.5  34.67
two    2000  Florida         1.2  34.67
three  2004     Ohio         2.0  34.67
four   1990    Texas         1.4  34.67
five   1994  Florida         0.8  34.67
'''

df.debt=[df.iloc[:,2][i]*5 for i in range(0,df.shape[0])]
print(df)
'''
       year    state  population  debt
one    2003   Nevada         1.5   7.5
two    2000  Florida         1.2   6.0
three  2004     Ohio         2.0  10.0
four   1990    Texas         1.4   7.0
five   1994  Florida         0.8   4.0
'''

print(df.head())
'''
       year    state  population  debt
one    2003   Nevada         1.5   7.5
two    2000  Florida         1.2   6.0
three  2004     Ohio         2.0  10.0
four   1990    Texas         1.4   7.0
five   1994  Florida         0.8   4.0
'''

print(df.tail())
'''
       year    state  population  debt
one    2003   Nevada         1.5   7.5
two    2000  Florida         1.2   6.0
three  2004     Ohio         2.0  10.0
four   1990    Texas         1.4   7.0
five   1994  Florida         0.8   4.0
'''


print(df.sample(n=3))
'''
      year    state  population  debt
one   2003   Nevada         1.5   7.5
two   2000  Florida         1.2   6.0
five  1994  Florida         0.8   4.0
'''

df['newColomn']=pd.Series(np.random.randn(df.shape[0]),index=df.index)
print(df)
'''
       year    state  population  debt  newColomn
one    2003   Nevada         1.5   7.5   0.515943
two    2000  Florida         1.2   6.0   0.463527
three  2004     Ohio         2.0  10.0   0.564936
four   1990    Texas         1.4   7.0   1.044508
five   1994  Florida         0.8   4.0  -0.086904
'''

print(df.drop_duplicates('state'))
'''
       year    state  population  debt  newColomn
one    2003   Nevada         1.5   7.5   0.515943
two    2000  Florida         1.2   6.0   0.463527
three  2004     Ohio         2.0  10.0   0.564936
four   1990    Texas         1.4   7.0   1.044508
'''


print(df.state)
'''
one       Nevada
two      Florida
three       Ohio
four       Texas
five     Florida
Name: state, dtype: object
'''


#4.2.3 Loading data from CSV file 

df=pd.read_csv('sampleDataSet.csv') # without setting names
print(df)
'''
    5.1  0.222222222       3.5  ...   0.2  0.041666667     setosa
0   4.9     0.166667  3.000000  ...  0.20  0.041666667     setosa
1   4.7     0.111111  3.200000  ...  0.20  0.041666667     setosa
2   4.6     0.083333  3.100000  ...  0.20  0.041666667     setosa
3   NaN     0.194444  3.600000  ...  0.20  0.041666667     setosa
4   NaN     0.305556  3.900000  ...  0.40        0.125     setosa
..  ...          ...       ...  ...   ...          ...        ...
94  7.2     0.805556  3.000000  ...  1.60        0.625  virginica
95  7.4          NaN  0.333333  ...  0.75    virginica        NaN
96  7.9     0.999900  3.800000  ...  2.00  0.791666667  virginica
97  6.4     0.583333  2.800000  ...  2.20        0.875  virginica
98  6.3     0.555556  2.800000  ...  1.50  0.583333333  virginica

[99 rows x 9 columns]
'''

df=pd.read_csv('sampleDataSet.csv ', names=['a','b','c','d','e','f','g','h','i'])
print(df)

'''
      a         b         c         d  ...         f     g            h          i
0   5.1  0.222222  3.500000  0.625000  ...  0.067797  0.20  0.041666667     setosa
1   4.9  0.166667  3.000000  0.416667  ...  0.067797  0.20  0.041666667     setosa
2   4.7  0.111111  3.200000  0.500000  ...       NaN  0.20  0.041666667     setosa
3   4.6  0.083333  3.100000  0.458333  ...  0.084746  0.20  0.041666667     setosa
4   NaN  0.194444  3.600000  0.666667  ...       NaN  0.20  0.041666667     setosa
..  ...       ...       ...       ...  ...       ...   ...          ...        ...
95  7.2  0.805556  3.000000  0.416667  ...  0.813559  1.60        0.625  virginica
96  7.4       NaN  0.333333  6.100000  ...  1.900000  0.75    virginica        NaN
97  7.9  0.999900  3.800000  0.750000  ...  0.915254  2.00  0.791666667  virginica
98  6.4  0.583333  2.800000  0.333333  ...  0.779661  2.20        0.875  virginica
99  6.3  0.555556  2.800000  0.333333  ...  0.694915  1.50  0.583333333  virginica

[100 rows x 9 columns]
'''

#ToDo 2: Comment on the shape of the data frame with and without setting names.
#without setting names
'''
      
0   5.1  0.222222  3.500000  0.625000  ...  0.067797  0.20  0.041666667     setosa
1   4.9  0.166667  3.000000  0.416667  ...  0.067797  0.20  0.041666667     setosa
2   4.7  0.111111  3.200000  0.500000  ...       NaN  0.20  0.041666667     setosa
3   4.6  0.083333  3.100000  0.458333  ...  0.084746  0.20  0.041666667     setosa
4   NaN  0.194444  3.600000  0.666667  ...       NaN  0.20  0.041666667     setosa
..  ...       ...       ...       ...  ...       ...   ...          ...        ...
95  7.2  0.805556  3.000000  0.416667  ...  0.813559  1.60        0.625  virginica
96  7.4       NaN  0.333333  6.100000  ...  1.900000  0.75    virginica        NaN
97  7.9  0.999900  3.800000  0.750000  ...  0.915254  2.00  0.791666667  virginica
98  6.4  0.583333  2.800000  0.333333  ...  0.779661  2.20        0.875  virginica
99  6.3  0.555556  2.800000  0.333333  ...  0.694915  1.50  0.583333333  virginica
'''

#with setting names

'''
      a         b         c         d  ...         f     g            h          i
0   5.1  0.222222  3.500000  0.625000  ...  0.067797  0.20  0.041666667     setosa
1   4.9  0.166667  3.000000  0.416667  ...  0.067797  0.20  0.041666667     setosa
2   4.7  0.111111  3.200000  0.500000  ...       NaN  0.20  0.041666667     setosa
3   4.6  0.083333  3.100000  0.458333  ...  0.084746  0.20  0.041666667     setosa
4   NaN  0.194444  3.600000  0.666667  ...       NaN  0.20  0.041666667     setosa
..  ...       ...       ...       ...  ...       ...   ...          ...        ...
95  7.2  0.805556  3.000000  0.416667  ...  0.813559  1.60        0.625  virginica
96  7.4       NaN  0.333333  6.100000  ...  1.900000  0.75    virginica        NaN
97  7.9  0.999900  3.800000  0.750000  ...  0.915254  2.00  0.791666667  virginica
98  6.4  0.583333  2.800000  0.333333  ...  0.779661  2.20        0.875  virginica
99  6.3  0.555556  2.800000  0.333333  ...  0.694915  1.50  0.583333333  virginica

'''


#4.2.4 Dealing with missing values. 
print(df.isnull().g)
'''
0     False
1     False
2     False
3     False
4     False
      ...  
95    False
96    False
97    False
98    False
99    False
Name: g, Length: 100, dtype: bool
'''

print( df.isnull().sum(0))
'''
a    4
b    1
c    0
d    3
e    2
f    2
g    1
h    1
i    1
dtype: int64
'''
df=df[df.isnull().a != True]

print(df)

'''
      a         b         c         d  ...         f     g            h          i
0   5.1  0.222222  3.500000  0.625000  ...  0.067797  0.20  0.041666667     setosa
1   4.9  0.166667  3.000000  0.416667  ...  0.067797  0.20  0.041666667     setosa
2   4.7  0.111111  3.200000  0.500000  ...       NaN  0.20  0.041666667     setosa
3   4.6  0.083333  3.100000  0.458333  ...  0.084746  0.20  0.041666667     setosa
7   5.0  0.194444  3.400000       NaN  ...  0.084746  0.20  0.041666667     setosa
..  ...       ...       ...       ...  ...       ...   ...          ...        ...
95  7.2  0.805556  3.000000  0.416667  ...  0.813559  1.60        0.625  virginica
96  7.4       NaN  0.333333  6.100000  ...  1.900000  0.75    virginica        NaN
97  7.9  0.999900  3.800000  0.750000  ...  0.915254  2.00  0.791666667  virginica
98  6.4  0.583333  2.800000  0.333333  ...  0.779661  2.20        0.875  virginica
99  6.3  0.555556  2.800000  0.333333  ...  0.694915  1.50  0.583333333  virginica

[96 rows x 9 columns]

'''
print(df.dropna(axis=0).isnull().sum())
'''
a    0
b    0
c    0
d    0
e    0
f    0
g    0
h    0
i    0
dtype: int64
'''


print(df.dropna(axis=1))
'''
   a         c
0   5.1  3.500000
1   4.9  3.000000
2   4.7  3.200000
3   4.6  3.100000
7   5.0  3.400000
..  ...       ...
95  7.2  3.000000
96  7.4  0.333333
97  7.9  3.800000
98  6.4  2.800000
99  6.3  2.800000

[96 rows x 2 columns]
'''

print(df.dropna(axis=1, how='all'))
'''
 a         b         c         d  ...         f     g            h          i
0   5.1  0.222222  3.500000  0.625000  ...  0.067797  0.20  0.041666667     setosa
1   4.9  0.166667  3.000000  0.416667  ...  0.067797  0.20  0.041666667     setosa
2   4.7  0.111111  3.200000  0.500000  ...       NaN  0.20  0.041666667     setosa
3   4.6  0.083333  3.100000  0.458333  ...  0.084746  0.20  0.041666667     setosa
7   5.0  0.194444  3.400000       NaN  ...  0.084746  0.20  0.041666667     setosa
..  ...       ...       ...       ...  ...       ...   ...          ...        ...
95  7.2  0.805556  3.000000  0.416667  ...  0.813559  1.60        0.625  virginica
96  7.4       NaN  0.333333  6.100000  ...  1.900000  0.75    virginica        NaN
97  7.9  0.999900  3.800000  0.750000  ...  0.915254  2.00  0.791666667  virginica
98  6.4  0.583333  2.800000  0.333333  ...  0.779661  2.20        0.875  virginica
99  6.3  0.555556  2.800000  0.333333  ...  0.694915  1.50  0.583333333  virginica

[96 rows x 9 columns]
'''

print(df.dropna(axis=1, thresh=1))
'''
  a         b         c         d  ...         f     g            h          i
0   5.1  0.222222  3.500000  0.625000  ...  0.067797  0.20  0.041666667     setosa
1   4.9  0.166667  3.000000  0.416667  ...  0.067797  0.20  0.041666667     setosa
2   4.7  0.111111  3.200000  0.500000  ...       NaN  0.20  0.041666667     setosa
3   4.6  0.083333  3.100000  0.458333  ...  0.084746  0.20  0.041666667     setosa
7   5.0  0.194444  3.400000       NaN  ...  0.084746  0.20  0.041666667     setosa
..  ...       ...       ...       ...  ...       ...   ...          ...        ...
95  7.2  0.805556  3.000000  0.416667  ...  0.813559  1.60        0.625  virginica
96  7.4       NaN  0.333333  6.100000  ...  1.900000  0.75    virginica        NaN
97  7.9  0.999900  3.800000  0.750000  ...  0.915254  2.00  0.791666667  virginica
98  6.4  0.583333  2.800000  0.333333  ...  0.779661  2.20        0.875  virginica
99  6.3  0.555556  2.800000  0.333333  ...  0.694915  1.50  0.583333333  virginica
'''


print(df.drop('i',axis=1))
'''
 a         b         c         d         e         f     g            h
0   5.1  0.222222  3.500000  0.625000  1.400000  0.067797  0.20  0.041666667
1   4.9  0.166667  3.000000  0.416667  1.400000  0.067797  0.20  0.041666667
2   4.7  0.111111  3.200000  0.500000  1.300000       NaN  0.20  0.041666667
3   4.6  0.083333  3.100000  0.458333  1.500000  0.084746  0.20  0.041666667
7   5.0  0.194444  3.400000       NaN  1.500000  0.084746  0.20  0.041666667
..  ...       ...       ...       ...       ...       ...   ...          ...
95  7.2  0.805556  3.000000  0.416667  5.800000  0.813559  1.60        0.625
96  7.4       NaN  0.333333  6.100000  0.864407  1.900000  0.75    virginica
97  7.9  0.999900  3.800000  0.750000  6.400000  0.915254  2.00  0.791666667
98  6.4  0.583333  2.800000  0.333333  5.600000  0.779661  2.20        0.875
99  6.3  0.555556  2.800000  0.333333  5.100000  0.694915  1.50  0.583333333

[96 rows x 8 columns]
'''

print(df.fillna(899))
'''
  a           b         c  ...     g            h          i
0   5.1    0.222222  3.500000  ...  0.20  0.041666667     setosa
1   4.9    0.166667  3.000000  ...  0.20  0.041666667     setosa
2   4.7    0.111111  3.200000  ...  0.20  0.041666667     setosa
3   4.6    0.083333  3.100000  ...  0.20  0.041666667     setosa
7   5.0    0.194444  3.400000  ...  0.20  0.041666667     setosa
..  ...         ...       ...  ...   ...          ...        ...
95  7.2    0.805556  3.000000  ...  1.60        0.625  virginica
96  7.4  899.000000  0.333333  ...  0.75    virginica        899
97  7.9    0.999900  3.800000  ...  2.00  0.791666667  virginica
98  6.4    0.583333  2.800000  ...  2.20        0.875  virginica
99  6.3    0.555556  2.800000  ...  1.50  0.583333333  virginica

[96 rows x 9 columns]
'''
print(df.fillna(method='ffill'))

'''
 a         b         c         d  ...         f     g            h          i
0   5.1  0.222222  3.500000  0.625000  ...  0.067797  0.20  0.041666667     setosa
1   4.9  0.166667  3.000000  0.416667  ...  0.067797  0.20  0.041666667     setosa
2   4.7  0.111111  3.200000  0.500000  ...  0.067797  0.20  0.041666667     setosa
3   4.6  0.083333  3.100000  0.458333  ...  0.084746  0.20  0.041666667     setosa
7   5.0  0.194444  3.400000  0.458333  ...  0.084746  0.20  0.041666667     setosa
..  ...       ...       ...       ...  ...       ...   ...          ...        ...
95  7.2  0.805556  3.000000  0.416667  ...  0.813559  1.60        0.625  virginica
96  7.4  0.805556  0.333333  6.100000  ...  1.900000  0.75    virginica  virginica
97  7.9  0.999900  3.800000  0.750000  ...  0.915254  2.00  0.791666667  virginica
98  6.4  0.583333  2.800000  0.333333  ...  0.779661  2.20        0.875  virginica
99  6.3  0.555556  2.800000  0.333333  ...  0.694915  1.50  0.583333333  virginica

[96 rows x 9 columns]
'''

print(df.replace(6.3,600))
'''
  a         b         c         d  ...         f     g            h          i
0     5.1  0.222222  3.500000  0.625000  ...  0.067797  0.20  0.041666667     setosa
1     4.9  0.166667  3.000000  0.416667  ...  0.067797  0.20  0.041666667     setosa
2     4.7  0.111111  3.200000  0.500000  ...       NaN  0.20  0.041666667     setosa
3     4.6  0.083333  3.100000  0.458333  ...  0.084746  0.20  0.041666667     setosa
7     5.0  0.194444  3.400000       NaN  ...  0.084746  0.20  0.041666667     setosa
..    ...       ...       ...       ...  ...       ...   ...          ...        ...
95    7.2  0.805556  3.000000  0.416667  ...  0.813559  1.60        0.625  virginica
96    7.4       NaN  0.333333  6.100000  ...  1.900000  0.75    virginica        NaN
97    7.9  0.999900  3.800000  0.750000  ...  0.915254  2.00  0.791666667  virginica
98    6.4  0.583333  2.800000  0.333333  ...  0.779661  2.20        0.875  virginica
99  600.0  0.555556  2.800000  0.333333  ...  0.694915  1.50  0.583333333  virginica

[96 rows x 9 columns]
'''
print(df.replace('.',np.nan))
'''
      a         b         c         d  ...         f     g            h          i
0   5.1  0.222222  3.500000  0.625000  ...  0.067797  0.20  0.041666667     setosa
1   4.9  0.166667  3.000000  0.416667  ...  0.067797  0.20  0.041666667     setosa
2   4.7  0.111111  3.200000  0.500000  ...       NaN  0.20  0.041666667     setosa
3   4.6  0.083333  3.100000  0.458333  ...  0.084746  0.20  0.041666667     setosa
7   5.0  0.194444  3.400000       NaN  ...  0.084746  0.20  0.041666667     setosa
..  ...       ...       ...       ...  ...       ...   ...          ...        ...
95  7.2  0.805556  3.000000  0.416667  ...  0.813559  1.60        0.625  virginica
96  7.4       NaN  0.333333  6.100000  ...  1.900000  0.75    virginica        NaN
97  7.9  0.999900  3.800000  0.750000  ...  0.915254  2.00  0.791666667  virginica
98  6.4  0.583333  2.800000  0.333333  ...  0.779661  2.20        0.875  virginica
99  6.3  0.555556  2.800000  0.333333  ...  0.694915  1.50  0.583333333  virginica

[96 rows x 9 columns]
'''



#4.2.5 Applying functions 

f=lambda df: df.max()-df.min()
def f(x):
    return x.max()-x.min()
print(df.iloc[: ,3:5].apply(f))

'''
d    6.090000
e    6.035593
dtype: float64
'''

#4.2.6 Group Operations

grouped=df[['a','b','e']].groupby(df['i'])
print(grouped.mean())

'''   a         b         e
i                                       
setosa      5.034483  0.203437  1.474194
versicolor  6.026471  0.479575  4.315152
virginica   6.625000  0.641411  5.612121
'''

grouped=df[['a','b','e']].groupby([df['i'],df['c']]).mean()
print(grouped.unstack())
'''
               a                                 ...    e                     
c            2.9   3.0       3.1       3.2  3.3  ...  2.4  2.5  2.6  2.7   2.8
i                                                ...                          
setosa      4.40  4.75  4.766667  4.700000  5.1  ...  NaN  NaN  NaN  NaN   NaN
versicolor  6.14  6.20  6.800000  6.433333  6.3  ...  3.6  4.4  3.5  4.3  4.52
virginica   6.80  6.95       NaN  6.750000  6.5  ...  NaN  5.1  6.9  5.1  5.40

[3 rows x 63 columns]
'''

#4.2.7 Data Summarizing

print(df['a'].nunique() )
#33

print(df['a'].value_counts() )

'''
6.4    6
6.3    6
5.8    5
5.7    5
5.1    5
5.0    4
6.5    4
6.0    4
5.4    4
5.6    4
4.8    4
4.9    4
6.7    4
5.2    3
5.5    3
7.7    3
6.1    3
7.2    3
6.8    2
4.6    2
6.6    2
5.9    2
4.7    2
6.9    2
6.2    2
7.6    1
7.0    1
4.4    1
7.4    1
7.1    1
7.9    1
4.3    1
7.3    1
Name: a, dtype: int64
'''

print(df.describe())
'''
count  96.000000  99.000000  100.000000  ...  98.000000  98.000000  99.000000
mean    5.940625   0.444264    3.016333  ...   3.818004   0.502540   1.200505
std     0.856502   0.235225    0.515756  ...   1.799759   0.329349   0.747462
min     4.300000   0.010000    0.333333  ...   0.864407   0.010000   0.100000
25%     5.200000   0.236111    2.800000  ...   1.600000   0.105932   0.350000
50%     5.900000   0.416667    3.000000  ...   4.500000   0.593220   1.400000
75%     6.500000   0.597222    3.300000  ...   5.100000   0.694915   1.800000
max     7.900000   0.999900    4.400000  ...   6.900000   1.900000   2.500000

[8 rows x 7 columns]
'''

print(df.mean() )
'''
a    5.940625
b    0.444264
c    3.016333
d    0.490394
e    3.818004
f    0.502540
g    1.200505
dtype: float64
'''

print(df.sort_index().head() )
'''
   a         b    c         d    e         f    g            h       i
0  5.1  0.222222  3.5  0.625000  1.4  0.067797  0.2  0.041666667  setosa
1  4.9  0.166667  3.0  0.416667  1.4  0.067797  0.2  0.041666667  setosa
2  4.7  0.111111  3.2  0.500000  1.3       NaN  0.2  0.041666667  setosa
3  4.6  0.083333  3.1  0.458333  1.5  0.084746  0.2  0.041666667  setosa
4  NaN  0.194444  3.6  0.666667  1.4       NaN  0.2  0.041666667  setosa
'''

#4.2.8 Data Visualization 

df.plot(kind='hist') 
df.plot(kind='bar') 
df.boxplot()


#4.3 Try Out 

#1.
df=pd.read_csv('lab02Exercise01.csv', names=['Channel1','Channel2','Channel3','Channel4','Channel5'])
print(df)


'''
  Channel1  Channel2  Channel3  Channel4  Channel5
0     -0.022098 -0.135461 -0.100475 -0.014574  0.036626
1     -0.021707 -0.164396 -0.106911 -0.027774 -0.045130
2           NaN -0.107590 -0.044757 -0.040040 -0.080305
3      0.014929 -0.016449 -0.001463 -0.045280  0.000612
4     -0.000988  0.005172 -0.052417 -0.054542  0.090948
...         ...       ...       ...       ...       ...
23993  0.246057  1.039765  1.429124  0.649511  0.953896
23994  0.260120  1.130245  1.510286  0.699971  1.042690
23995  0.286042  1.284954  1.639914  0.766578  1.160491
23996  0.308476  1.392243  1.749650  0.811173  1.232035
23997  0.314683  1.393349  1.792961  0.821080  1.225376

[23998 rows x 5 columns]
'''

#2.
print(df.isnull().sum())
'''
Channel1     3
Channel2    11
Channel3    13
Channel4     4
Channel5     9
dtype: int64
'''
df.fillna(df.mean(), inplace=True) 
print(df.isnull().sum())
'''
Channel1    0
Channel2    0
Channel3    0
Channel4    0
Channel5    0
dtype: int64
'''
#3.
print(scatter_matrix(df,alpha=0.2,figsize=(6,6),diagonal='kde'))


#4.
df.loc[(df['Channel1']+df['Channel5'])/2 <(df['Channel2']+df['Channel3']+df['Channel4'])/3,'class']=1
df.loc[(df['Channel1']+df['Channel5'])/2>=(df['Channel2']+df['Channel3']+df['Channel4'])/3,'class']=0
print(df)
'''
       Channel1  Channel2  Channel3  Channel4  Channel5  class
0     -0.022098 -0.135461 -0.100475 -0.014574  0.036626    0.0
1     -0.021707 -0.164396 -0.106911 -0.027774 -0.045130    0.0
2           NaN -0.107590 -0.044757 -0.040040 -0.080305    NaN
3      0.014929 -0.016449 -0.001463 -0.045280  0.000612    0.0
4     -0.000988  0.005172 -0.052417 -0.054542  0.090948    0.0
...         ...       ...       ...       ...       ...    ...
23993  0.246057  1.039765  1.429124  0.649511  0.953896    1.0
23994  0.260120  1.130245  1.510286  0.699971  1.042690    1.0
23995  0.286042  1.284954  1.639914  0.766578  1.160491    1.0
23996  0.308476  1.392243  1.749650  0.811173  1.232035    1.0
23997  0.314683  1.393349  1.792961  0.821080  1.225376    1.0

[23998 rows x 6 columns]
'''


